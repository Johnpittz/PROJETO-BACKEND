{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serialize = void 0;\nconst buffer_writer_1 = require(\"./buffer-writer\");\nconst writer = new buffer_writer_1.Writer();\nconst startup = opts => {\n  // protocol version\n  writer.addInt16(3).addInt16(0);\n  for (const key of Object.keys(opts)) {\n    writer.addCString(key).addCString(opts[key]);\n  }\n  writer.addCString('client_encoding').addCString('UTF8');\n  var bodyBuffer = writer.addCString('').flush();\n  // this message is sent without a code\n  var length = bodyBuffer.length + 4;\n  return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();\n};\nconst requestSsl = () => {\n  const response = Buffer.allocUnsafe(8);\n  response.writeInt32BE(8, 0);\n  response.writeInt32BE(80877103, 4);\n  return response;\n};\nconst password = password => {\n  return writer.addCString(password).flush(112 /* startup */);\n};\n\nconst sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n  // 0x70 = 'p'\n  writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n  return writer.flush(112 /* startup */);\n};\n\nconst sendSCRAMClientFinalMessage = function (additionalData) {\n  return writer.addString(additionalData).flush(112 /* startup */);\n};\n\nconst query = text => {\n  return writer.addCString(text).flush(81 /* query */);\n};\n\nconst emptyArray = [];\nconst parse = query => {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n  // normalize missing query names to allow for null\n  const name = query.name || '';\n  if (name.length > 63) {\n    /* eslint-disable no-console */\n    console.error('Warning! Postgres only supports 63 characters for query names.');\n    console.error('You supplied %s (%s)', name, name.length);\n    console.error('This can cause conflicts and silent errors executing queries');\n    /* eslint-enable no-console */\n  }\n\n  const types = query.types || emptyArray;\n  var len = types.length;\n  var buffer = writer.addCString(name) // name of query\n  .addCString(query.text) // actual query text\n  .addInt16(len);\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(types[i]);\n  }\n  return writer.flush(80 /* parse */);\n};\n\nconst paramWriter = new buffer_writer_1.Writer();\nconst writeValues = function (values, valueMapper) {\n  for (let i = 0; i < values.length; i++) {\n    const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];\n    if (mappedVal == null) {\n      // add the param type (string) to the writer\n      writer.addInt16(0 /* STRING */);\n      // write -1 to the param writer to indicate null\n      paramWriter.addInt32(-1);\n    } else if (mappedVal instanceof Buffer) {\n      // add the param type (binary) to the writer\n      writer.addInt16(1 /* BINARY */);\n      // add the buffer to the param writer\n      paramWriter.addInt32(mappedVal.length);\n      paramWriter.add(mappedVal);\n    } else {\n      // add the param type (string) to the writer\n      writer.addInt16(0 /* STRING */);\n      paramWriter.addInt32(Buffer.byteLength(mappedVal));\n      paramWriter.addString(mappedVal);\n    }\n  }\n};\nconst bind = (config = {}) => {\n  // normalize config\n  const portal = config.portal || '';\n  const statement = config.statement || '';\n  const binary = config.binary || false;\n  const values = config.values || emptyArray;\n  const len = values.length;\n  writer.addCString(portal).addCString(statement);\n  writer.addInt16(len);\n  writeValues(values, config.valueMapper);\n  writer.addInt16(len);\n  writer.add(paramWriter.flush());\n  // format code\n  writer.addInt16(binary ? 1 /* BINARY */ : 0 /* STRING */);\n  return writer.flush(66 /* bind */);\n};\n\nconst emptyExecute = Buffer.from([69 /* execute */, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00]);\nconst execute = config => {\n  // this is the happy path for most queries\n  if (!config || !config.portal && !config.rows) {\n    return emptyExecute;\n  }\n  const portal = config.portal || '';\n  const rows = config.rows || 0;\n  const portalLength = Buffer.byteLength(portal);\n  const len = 4 + portalLength + 1 + 4;\n  // one extra bit for code\n  const buff = Buffer.allocUnsafe(1 + len);\n  buff[0] = 69 /* execute */;\n  buff.writeInt32BE(len, 1);\n  buff.write(portal, 5, 'utf-8');\n  buff[portalLength + 5] = 0; // null terminate portal cString\n  buff.writeUInt32BE(rows, buff.length - 4);\n  return buff;\n};\nconst cancel = (processID, secretKey) => {\n  const buffer = Buffer.allocUnsafe(16);\n  buffer.writeInt32BE(16, 0);\n  buffer.writeInt16BE(1234, 4);\n  buffer.writeInt16BE(5678, 6);\n  buffer.writeInt32BE(processID, 8);\n  buffer.writeInt32BE(secretKey, 12);\n  return buffer;\n};\nconst cstringMessage = (code, string) => {\n  const stringLen = Buffer.byteLength(string);\n  const len = 4 + stringLen + 1;\n  // one extra bit for code\n  const buffer = Buffer.allocUnsafe(1 + len);\n  buffer[0] = code;\n  buffer.writeInt32BE(len, 1);\n  buffer.write(string, 5, 'utf-8');\n  buffer[len] = 0; // null terminate cString\n  return buffer;\n};\nconst emptyDescribePortal = writer.addCString('P').flush(68 /* describe */);\nconst emptyDescribeStatement = writer.addCString('S').flush(68 /* describe */);\nconst describe = msg => {\n  return msg.name ? cstringMessage(68 /* describe */, `${msg.type}${msg.name || ''}`) : msg.type === 'P' ? emptyDescribePortal : emptyDescribeStatement;\n};\nconst close = msg => {\n  const text = `${msg.type}${msg.name || ''}`;\n  return cstringMessage(67 /* close */, text);\n};\nconst copyData = chunk => {\n  return writer.add(chunk).flush(100 /* copyFromChunk */);\n};\n\nconst copyFail = message => {\n  return cstringMessage(102 /* copyFail */, message);\n};\nconst codeOnlyBuffer = code => Buffer.from([code, 0x00, 0x00, 0x00, 0x04]);\nconst flushBuffer = codeOnlyBuffer(72 /* flush */);\nconst syncBuffer = codeOnlyBuffer(83 /* sync */);\nconst endBuffer = codeOnlyBuffer(88 /* end */);\nconst copyDoneBuffer = codeOnlyBuffer(99 /* copyDone */);\nconst serialize = {\n  startup,\n  password,\n  requestSsl,\n  sendSASLInitialResponseMessage,\n  sendSCRAMClientFinalMessage,\n  query,\n  parse,\n  bind,\n  execute,\n  describe,\n  close,\n  flush: () => flushBuffer,\n  sync: () => syncBuffer,\n  end: () => endBuffer,\n  copyData,\n  copyDone: () => copyDoneBuffer,\n  copyFail,\n  cancel\n};\nexports.serialize = serialize;","map":{"version":3,"names":["Object","defineProperty","exports","value","serialize","buffer_writer_1","require","writer","Writer","startup","opts","addInt16","key","keys","addCString","bodyBuffer","flush","length","addInt32","add","requestSsl","response","Buffer","allocUnsafe","writeInt32BE","password","sendSASLInitialResponseMessage","mechanism","initialResponse","byteLength","addString","sendSCRAMClientFinalMessage","additionalData","query","text","emptyArray","parse","name","console","error","types","len","buffer","i","paramWriter","writeValues","values","valueMapper","mappedVal","bind","config","portal","statement","binary","emptyExecute","from","execute","rows","portalLength","buff","write","writeUInt32BE","cancel","processID","secretKey","writeInt16BE","cstringMessage","code","string","stringLen","emptyDescribePortal","emptyDescribeStatement","describe","msg","type","close","copyData","chunk","copyFail","message","codeOnlyBuffer","flushBuffer","syncBuffer","endBuffer","copyDoneBuffer","sync","end","copyDone"],"sources":["C:/Users/joao2/Desktop/NOVO-PROJETO/node_modules/pg-protocol/dist/serializer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serialize = void 0;\nconst buffer_writer_1 = require(\"./buffer-writer\");\nconst writer = new buffer_writer_1.Writer();\nconst startup = (opts) => {\n    // protocol version\n    writer.addInt16(3).addInt16(0);\n    for (const key of Object.keys(opts)) {\n        writer.addCString(key).addCString(opts[key]);\n    }\n    writer.addCString('client_encoding').addCString('UTF8');\n    var bodyBuffer = writer.addCString('').flush();\n    // this message is sent without a code\n    var length = bodyBuffer.length + 4;\n    return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();\n};\nconst requestSsl = () => {\n    const response = Buffer.allocUnsafe(8);\n    response.writeInt32BE(8, 0);\n    response.writeInt32BE(80877103, 4);\n    return response;\n};\nconst password = (password) => {\n    return writer.addCString(password).flush(112 /* startup */);\n};\nconst sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n    // 0x70 = 'p'\n    writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n    return writer.flush(112 /* startup */);\n};\nconst sendSCRAMClientFinalMessage = function (additionalData) {\n    return writer.addString(additionalData).flush(112 /* startup */);\n};\nconst query = (text) => {\n    return writer.addCString(text).flush(81 /* query */);\n};\nconst emptyArray = [];\nconst parse = (query) => {\n    // expect something like this:\n    // { name: 'queryName',\n    //   text: 'select * from blah',\n    //   types: ['int8', 'bool'] }\n    // normalize missing query names to allow for null\n    const name = query.name || '';\n    if (name.length > 63) {\n        /* eslint-disable no-console */\n        console.error('Warning! Postgres only supports 63 characters for query names.');\n        console.error('You supplied %s (%s)', name, name.length);\n        console.error('This can cause conflicts and silent errors executing queries');\n        /* eslint-enable no-console */\n    }\n    const types = query.types || emptyArray;\n    var len = types.length;\n    var buffer = writer\n        .addCString(name) // name of query\n        .addCString(query.text) // actual query text\n        .addInt16(len);\n    for (var i = 0; i < len; i++) {\n        buffer.addInt32(types[i]);\n    }\n    return writer.flush(80 /* parse */);\n};\nconst paramWriter = new buffer_writer_1.Writer();\nconst writeValues = function (values, valueMapper) {\n    for (let i = 0; i < values.length; i++) {\n        const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];\n        if (mappedVal == null) {\n            // add the param type (string) to the writer\n            writer.addInt16(0 /* STRING */);\n            // write -1 to the param writer to indicate null\n            paramWriter.addInt32(-1);\n        }\n        else if (mappedVal instanceof Buffer) {\n            // add the param type (binary) to the writer\n            writer.addInt16(1 /* BINARY */);\n            // add the buffer to the param writer\n            paramWriter.addInt32(mappedVal.length);\n            paramWriter.add(mappedVal);\n        }\n        else {\n            // add the param type (string) to the writer\n            writer.addInt16(0 /* STRING */);\n            paramWriter.addInt32(Buffer.byteLength(mappedVal));\n            paramWriter.addString(mappedVal);\n        }\n    }\n};\nconst bind = (config = {}) => {\n    // normalize config\n    const portal = config.portal || '';\n    const statement = config.statement || '';\n    const binary = config.binary || false;\n    const values = config.values || emptyArray;\n    const len = values.length;\n    writer.addCString(portal).addCString(statement);\n    writer.addInt16(len);\n    writeValues(values, config.valueMapper);\n    writer.addInt16(len);\n    writer.add(paramWriter.flush());\n    // format code\n    writer.addInt16(binary ? 1 /* BINARY */ : 0 /* STRING */);\n    return writer.flush(66 /* bind */);\n};\nconst emptyExecute = Buffer.from([69 /* execute */, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00]);\nconst execute = (config) => {\n    // this is the happy path for most queries\n    if (!config || (!config.portal && !config.rows)) {\n        return emptyExecute;\n    }\n    const portal = config.portal || '';\n    const rows = config.rows || 0;\n    const portalLength = Buffer.byteLength(portal);\n    const len = 4 + portalLength + 1 + 4;\n    // one extra bit for code\n    const buff = Buffer.allocUnsafe(1 + len);\n    buff[0] = 69 /* execute */;\n    buff.writeInt32BE(len, 1);\n    buff.write(portal, 5, 'utf-8');\n    buff[portalLength + 5] = 0; // null terminate portal cString\n    buff.writeUInt32BE(rows, buff.length - 4);\n    return buff;\n};\nconst cancel = (processID, secretKey) => {\n    const buffer = Buffer.allocUnsafe(16);\n    buffer.writeInt32BE(16, 0);\n    buffer.writeInt16BE(1234, 4);\n    buffer.writeInt16BE(5678, 6);\n    buffer.writeInt32BE(processID, 8);\n    buffer.writeInt32BE(secretKey, 12);\n    return buffer;\n};\nconst cstringMessage = (code, string) => {\n    const stringLen = Buffer.byteLength(string);\n    const len = 4 + stringLen + 1;\n    // one extra bit for code\n    const buffer = Buffer.allocUnsafe(1 + len);\n    buffer[0] = code;\n    buffer.writeInt32BE(len, 1);\n    buffer.write(string, 5, 'utf-8');\n    buffer[len] = 0; // null terminate cString\n    return buffer;\n};\nconst emptyDescribePortal = writer.addCString('P').flush(68 /* describe */);\nconst emptyDescribeStatement = writer.addCString('S').flush(68 /* describe */);\nconst describe = (msg) => {\n    return msg.name\n        ? cstringMessage(68 /* describe */, `${msg.type}${msg.name || ''}`)\n        : msg.type === 'P'\n            ? emptyDescribePortal\n            : emptyDescribeStatement;\n};\nconst close = (msg) => {\n    const text = `${msg.type}${msg.name || ''}`;\n    return cstringMessage(67 /* close */, text);\n};\nconst copyData = (chunk) => {\n    return writer.add(chunk).flush(100 /* copyFromChunk */);\n};\nconst copyFail = (message) => {\n    return cstringMessage(102 /* copyFail */, message);\n};\nconst codeOnlyBuffer = (code) => Buffer.from([code, 0x00, 0x00, 0x00, 0x04]);\nconst flushBuffer = codeOnlyBuffer(72 /* flush */);\nconst syncBuffer = codeOnlyBuffer(83 /* sync */);\nconst endBuffer = codeOnlyBuffer(88 /* end */);\nconst copyDoneBuffer = codeOnlyBuffer(99 /* copyDone */);\nconst serialize = {\n    startup,\n    password,\n    requestSsl,\n    sendSASLInitialResponseMessage,\n    sendSCRAMClientFinalMessage,\n    query,\n    parse,\n    bind,\n    execute,\n    describe,\n    close,\n    flush: () => flushBuffer,\n    sync: () => syncBuffer,\n    end: () => endBuffer,\n    copyData,\n    copyDone: () => copyDoneBuffer,\n    copyFail,\n    cancel,\n};\nexports.serialize = serialize;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}