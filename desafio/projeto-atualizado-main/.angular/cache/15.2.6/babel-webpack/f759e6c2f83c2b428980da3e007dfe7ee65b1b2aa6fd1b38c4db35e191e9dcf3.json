{"ast":null,"code":"import { of } from 'rxjs';\nimport { Client } from 'pg';\nimport * as i0 from \"@angular/core\";\nexport class TarefaService {\n  constructor() {\n    this.dbConfig = {\n      host: process.env['DB_HOST'],\n      user: process.env['DB_USER'],\n      password: process.env['DB_PASSWORD'],\n      database: process.env['DB_DATABASE']\n    };\n    // Resto do código do serviço...\n    this.atividades = [];\n  }\n  getAtividadess() {\n    // Conecte-se ao banco de dados e execute a consulta\n    const client = new Client(this.dbConfig);\n    client.connect();\n    client.query('SELECT * FROM atividades', (err, res) => {\n      if (err) throw err;\n      console.log(res.rows); // Exibe as linhas retornadas do banco de dados no terminal\n      client.end();\n    });\n    return []; // Retorne um array vazio por enquanto, pois ainda não estamos usando os dados retornados\n  }\n\n  getAtividades() {\n    return of(this.atividades);\n  }\n  adicionarAtividade(atividade) {\n    this.atividades.push(atividade);\n  }\n  atualizarAtividade(atividade) {\n    const index = this.atividades.findIndex(a => a.id === atividade.id);\n    if (index !== -1) {\n      this.atividades[index] = atividade;\n    }\n  }\n  excluirTarefa(tarefa) {\n    const index = this.atividades.findIndex(item => item.id === tarefa.id);\n    if (index >= 0) {\n      this.atividades.splice(index, 1);\n    }\n  }\n}\nTarefaService.ɵfac = function TarefaService_Factory(t) {\n  return new (t || TarefaService)();\n};\nTarefaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TarefaService,\n  factory: TarefaService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,MAAM,QAAQ,IAAI;;AAI3B,OAAM,MAAOC,aAAa;EASxBC;IAPQ,aAAQ,GAAG;MACjBC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MAC5BC,IAAI,EAAEF,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MAC5BE,QAAQ,EAAEH,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MACpCG,QAAQ,EAAEJ,OAAO,CAACC,GAAG,CAAC,aAAa;KACpC;IAoBD;IAEQ,eAAU,GAAkB,EAAE;EApBtB;EAETI,cAAc;IACnB;IACA,MAAMC,MAAM,GAAG,IAAIV,MAAM,CAAC,IAAI,CAACW,QAAQ,CAAC;IACxCD,MAAM,CAACE,OAAO,EAAE;IAEhBF,MAAM,CAACG,KAAK,CAAC,0BAA0B,EAAE,CAACC,GAAQ,EAAEC,GAAmB,KAAI;MACzE,IAAID,GAAG,EAAE,MAAMA,GAAG;MAElBE,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC;MAEvBR,MAAM,CAACS,GAAG,EAAE;IACd,CAAC,CAAC;IAEF,OAAO,EAAE,CAAC,CAAC;EACb;;EAOOC,aAAa;IAClB,OAAOrB,EAAE,CAAC,IAAI,CAACsB,UAAU,CAAC;EAC5B;EAEOC,kBAAkB,CAACC,SAAsB;IAC9C,IAAI,CAACF,UAAU,CAACG,IAAI,CAACD,SAAS,CAAC;EACjC;EAEOE,kBAAkB,CAACF,SAAsB;IAC9C,MAAMG,KAAK,GAAG,IAAI,CAACL,UAAU,CAACM,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKN,SAAS,CAACM,EAAE,CAAC;IACnE,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACL,UAAU,CAACK,KAAK,CAAC,GAAGH,SAAS;;EAEtC;EACKO,aAAa,CAACC,MAAmB;IACtC,MAAML,KAAK,GAAG,IAAI,CAACL,UAAU,CAACM,SAAS,CAACK,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKE,MAAM,CAACF,EAAE,CAAC;IACtE,IAAIH,KAAK,IAAI,CAAC,EAAE;MACd,IAAI,CAACL,UAAU,CAACY,MAAM,CAACP,KAAK,EAAE,CAAC,CAAC;;EAEpC;;AAnDazB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAiC,SAAbjC,aAAa;EAAAkC,YAFZ;AAAM","names":["of","Client","TarefaService","constructor","host","process","env","user","password","database","getAtividadess","client","dbConfig","connect","query","err","res","console","log","rows","end","getAtividades","atividades","adicionarAtividade","atividade","push","atualizarAtividade","index","findIndex","a","id","excluirTarefa","tarefa","item","splice","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\joao2\\Desktop\\NOVO-PROJETO\\desafio\\projeto-atualizado-main\\src\\app\\shared\\service\\tarefa.service.ts"],"sourcesContent":["import { ITarefaEnum } from '../models/ITarefa';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Client } from 'pg';\n@Injectable({\n  providedIn: 'root'\n})\nexport class TarefaService {\n\n  private dbConfig = {\n    host: process.env['DB_HOST'],\n    user: process.env['DB_USER'],\n    password: process.env['DB_PASSWORD'],\n    database: process.env['DB_DATABASE']\n  };\n\n  constructor() { }\n\n  public getAtividadess(): ITarefaEnum[] {\n    // Conecte-se ao banco de dados e execute a consulta\n    const client = new Client(this.dbConfig);\n    client.connect();\n\n    client.query('SELECT * FROM atividades', (err: any, res: { rows: any; }) => {\n      if (err) throw err;\n\n      console.log(res.rows); // Exibe as linhas retornadas do banco de dados no terminal\n\n      client.end();\n    });\n\n    return []; // Retorne um array vazio por enquanto, pois ainda não estamos usando os dados retornados\n  }\n\n  // Resto do código do serviço...\n\n  private atividades: ITarefaEnum[] = [];\n\n\n  public getAtividades(): Observable<ITarefaEnum[]> {\n    return of(this.atividades);\n  }\n\n  public adicionarAtividade(atividade: ITarefaEnum): void {\n    this.atividades.push(atividade);\n  }\n\n  public atualizarAtividade(atividade: ITarefaEnum): void {\n    const index = this.atividades.findIndex(a => a.id === atividade.id);\n    if (index !== -1) {\n      this.atividades[index] = atividade;\n    }\n  }\npublic excluirTarefa(tarefa: ITarefaEnum): void {\n  const index = this.atividades.findIndex(item => item.id === tarefa.id);\n  if (index >= 0) {\n    this.atividades.splice(index, 1);\n}\n}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}