{"ast":null,"code":"\"use strict\";\n\n//binary data writer tuned for encoding binary specific to the postgres binary protocol\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Writer = void 0;\nclass Writer {\n  constructor(size = 256) {\n    this.size = size;\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(size);\n  }\n  ensure(size) {\n    var remaining = this.buffer.length - this.offset;\n    if (remaining < size) {\n      var oldBuffer = this.buffer;\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n      this.buffer = Buffer.allocUnsafe(newSize);\n      oldBuffer.copy(this.buffer);\n    }\n  }\n  addInt32(num) {\n    this.ensure(4);\n    this.buffer[this.offset++] = num >>> 24 & 0xff;\n    this.buffer[this.offset++] = num >>> 16 & 0xff;\n    this.buffer[this.offset++] = num >>> 8 & 0xff;\n    this.buffer[this.offset++] = num >>> 0 & 0xff;\n    return this;\n  }\n  addInt16(num) {\n    this.ensure(2);\n    this.buffer[this.offset++] = num >>> 8 & 0xff;\n    this.buffer[this.offset++] = num >>> 0 & 0xff;\n    return this;\n  }\n  addCString(string) {\n    if (!string) {\n      this.ensure(1);\n    } else {\n      var len = Buffer.byteLength(string);\n      this.ensure(len + 1); // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8');\n      this.offset += len;\n    }\n    this.buffer[this.offset++] = 0; // null terminator\n    return this;\n  }\n  addString(string = '') {\n    var len = Buffer.byteLength(string);\n    this.ensure(len);\n    this.buffer.write(string, this.offset);\n    this.offset += len;\n    return this;\n  }\n  add(otherBuffer) {\n    this.ensure(otherBuffer.length);\n    otherBuffer.copy(this.buffer, this.offset);\n    this.offset += otherBuffer.length;\n    return this;\n  }\n  join(code) {\n    if (code) {\n      this.buffer[this.headerPosition] = code;\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1);\n      this.buffer.writeInt32BE(length, this.headerPosition + 1);\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset);\n  }\n  flush(code) {\n    var result = this.join(code);\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(this.size);\n    return result;\n  }\n}\nexports.Writer = Writer;","map":{"version":3,"names":["Object","defineProperty","exports","value","Writer","constructor","size","offset","headerPosition","buffer","Buffer","allocUnsafe","ensure","remaining","length","oldBuffer","newSize","copy","addInt32","num","addInt16","addCString","string","len","byteLength","write","addString","add","otherBuffer","join","code","writeInt32BE","slice","flush","result"],"sources":["C:/Users/joao2/Desktop/NOVO-PROJETO/node_modules/pg-protocol/dist/buffer-writer.js"],"sourcesContent":["\"use strict\";\n//binary data writer tuned for encoding binary specific to the postgres binary protocol\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Writer = void 0;\nclass Writer {\n    constructor(size = 256) {\n        this.size = size;\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(size);\n    }\n    ensure(size) {\n        var remaining = this.buffer.length - this.offset;\n        if (remaining < size) {\n            var oldBuffer = this.buffer;\n            // exponential growth factor of around ~ 1.5\n            // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n            var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n            this.buffer = Buffer.allocUnsafe(newSize);\n            oldBuffer.copy(this.buffer);\n        }\n    }\n    addInt32(num) {\n        this.ensure(4);\n        this.buffer[this.offset++] = (num >>> 24) & 0xff;\n        this.buffer[this.offset++] = (num >>> 16) & 0xff;\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\n        return this;\n    }\n    addInt16(num) {\n        this.ensure(2);\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\n        return this;\n    }\n    addCString(string) {\n        if (!string) {\n            this.ensure(1);\n        }\n        else {\n            var len = Buffer.byteLength(string);\n            this.ensure(len + 1); // +1 for null terminator\n            this.buffer.write(string, this.offset, 'utf-8');\n            this.offset += len;\n        }\n        this.buffer[this.offset++] = 0; // null terminator\n        return this;\n    }\n    addString(string = '') {\n        var len = Buffer.byteLength(string);\n        this.ensure(len);\n        this.buffer.write(string, this.offset);\n        this.offset += len;\n        return this;\n    }\n    add(otherBuffer) {\n        this.ensure(otherBuffer.length);\n        otherBuffer.copy(this.buffer, this.offset);\n        this.offset += otherBuffer.length;\n        return this;\n    }\n    join(code) {\n        if (code) {\n            this.buffer[this.headerPosition] = code;\n            //length is everything in this packet minus the code\n            const length = this.offset - (this.headerPosition + 1);\n            this.buffer.writeInt32BE(length, this.headerPosition + 1);\n        }\n        return this.buffer.slice(code ? 0 : 5, this.offset);\n    }\n    flush(code) {\n        var result = this.join(code);\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(this.size);\n        return result;\n    }\n}\nexports.Writer = Writer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}